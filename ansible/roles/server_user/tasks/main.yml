---
- name: Install sudo and bash
  ansible.builtin.apt:
    name:
      - sudo
      - bash
    state: present

- name: Check if the user_password variable was provided
  ansible.builtin.fail:
    msg: user_password variable can not be empty
  when: user_password | length == 0

- name: Create salt to be used for password hashing
  become: true
  become_user: root
  block:
    - name: Check if salt file exists
      ansible.builtin.stat:
        path: "{{ salt_file_path }}"
      register: salt_file

    - name: Save random salt
      when: not salt_file.stat.exists
      ansible.builtin.copy:
        content: "{{ lookup('community.general.random_string', length=16, upper=true, lower=true, number=true, special=false) }}"
        dest: "{{ salt_file_path }}"
        mode: 0600

    - name: Read the password salt
      ansible.builtin.slurp:
        src: "{{ salt_file_path }}"
      register: salt_file

    - name: Decode the salt
      changed_when: false
      ansible.builtin.set_fact:
        password_salt: "{{ salt_file['content'] | b64decode }}"

- name: Create user
  ansible.builtin.user:
    name: "{{ user_name }}"
    password: "{{ user_password | ansible.builtin.password_hash('sha512', password_salt) }}"
    shell: "/bin/bash"
    state: present

- name: Enable sudo insults
  become: true
  become_user: root
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/01-sudo-insults
    line: "Defaults insults"
    create: true
    validate: "visudo -cf %s"
    mode: 0440

- name: Give user sudo permissions
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/10-server-user
    line: "{{ user_name }} ALL=(ALL) ALL"
    create: true
    validate: "visudo -cf %s"
    mode: 0440
  become: true
  become_user: root

- name: Set authorized key from host
  ansible.posix.authorized_key:
    user: "{{ user_name }}"
    state: present
    key: "{{ lookup('ansible.builtin.file', vars.ssh_pub_key_file) }}"
