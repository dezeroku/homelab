---
global:
  alwaysAppendIdentifierToResourceName: true

hostNetwork: true

controllers:
  main:
    type: statefulset
    replicas: 1
    serviceAccount:
      identifier: main
    pod:
      hostNetwork: true
    containers:
      main:
        image:
          repository: ghcr.io/home-assistant/home-assistant
          tag: 2025.1.2
          pullPolicy: IfNotPresent
        probes:
          readiness:
            enabled: true
          liveness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 15
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 1Gi

serviceAccount:
  main: {}

service:
  main:
    controller: main
    ports:
      http:
        port: 8123

ingress:
  main:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.69.0/24"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Home Assistant
      gethomepage.dev/group: IoT
      gethomepage.dev/icon: home-assistant.png
      gethomepage.dev/name: Home Automation
    tls:
      - secretName: home-assistant-general-tls
        hosts:
          - &host home-assistant.{{ requiredEnv "DOMAIN" }}
    hosts:
      - host: *host
        paths:
          - path: /
            pathType: ImplementationSpecific
            service:
              identifier: main

persistence:
  config-storage:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 1Gi
    globalMounts:
      - path: /config

  config:
    enabled: true
    type: configMap
    name: home-assistant-config
    advancedMounts:
      main:
        main:
          - path: /config/configuration.yaml
            subPath: configuration.yaml

configMaps:
  config:
    enabled: true
    data:
      configuration.yaml: |
        # Loads default set of integrations. Do not remove.
        default_config:

        # Load frontend themes from the themes folder
        #frontend:
        #  themes: !include_dir_merge_named themes

        #automation: !include automations.yaml
        #script: !include scripts.yaml
        #scene: !include scenes.yaml

        prometheus:
          namespace: hass

        http:
          use_x_forwarded_for: true
          # TODO: this looks pretty much like a hardcode
          # does our ansible setup make any guarantees about the CIDR for pods?
          #trusted_proxies: "10.42.0.0/16"
          # TODO: this is a very much hardcoded node IP
          trusted_proxies:
            - 192.168.4.0/24
        homekit:
          port: 31333
          name: HASS Bridge

        # logger:
        #   default: warning
        #   logs:
        #     homeassistant.components.homekit: debug
        #     pyhap: debug

serviceMonitor:
  main:
    enabled: true
    serviceName: home-assistant
    endpoints:
      - interval: 1m
        params:
          format:
            - prometheus
        path: /api/prometheus
        port: http
        scheme: http
        bearerTokenSecret:
          key: token
          name: home-assistant-hass-prometheus-secret
          optional: false
        tlsConfig:
          insecureSkipVerify: true

rawResources:
  vault-auth:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultAuth
    spec:
      spec:
       method: kubernetes
       mount: k8s/homeserver
       kubernetes:
         role: home-assistant
         serviceAccount: home-assistant-main
  hass-prometheus-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/home-assistant/prometheus
        destination:
          name: home-assistant-hass-prometheus-secret
          create: true
        vaultAuthRef: home-assistant-vault-auth
