# This is migrated https://github.com/iv-org/invidious/tree/master/kubernetes basically
# with minor changes related to the app-template and secrets in use
---
defaultPodOptions:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  nodeSelector:
    # TODO: currently Invidious does not provide multi-manifest images and pushes
    # all the architectures under different tags. Create a PR to change that
    kubernetes.io/arch: arm64

controllers:
  main:
    #strategy: Recreate
    strategy: RollingUpdate
    # invidious is single-threaded, so bumping number
    # of replicas significantly speeds up things such as loading thumbnails
    replicas: 1
    containers:
      main:
        image:
          repository: quay.io/invidious/invidious
          tag: latest-arm64
          pullPolicy: Always
        env:
          # https://github.com/iv-org/invidious/issues/2970
          INVIDIOUS_PORT: 3000
          INVIDIOUS_CONFIG_FILE: /config/config.yaml
          INVIDIOUS_DATABASE_URL:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: uri
          INVIDIOUS_HMAC_KEY:
            valueFrom:
              secretKeyRef:
                name: invidious-hmac-secret
                key: key
        probes:
          readiness:
            enabled: true
          liveness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 15
        resources:
          limits:
            memory: 1024Mi
          requests:
            memory: 64Mi

    initContainers:
      wait-for-postgresql:
        env:
          DB_HOST:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: host
          DB_PORT:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: port
          DB_USER:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: user
          DB_NAME:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: dbname
        image:
          repository: postgres
          tag: 15.5-alpine
        args:
          - /bin/sh
          - -c
          - until pg_isready -h "$(DB_HOST)" -p "$(DB_PORT)" -U "$(DB_USER)" -d "$(DB_NAME)"; do echo waiting for database; sleep 2; done;
        resources: {}
  deployment-restart:
    type: cronjob
    cronjob:
      concurrencyPolicy: Forbid
      schedule: '5 */6 * * *'
      backoffLimit: 2
      # TODO: wait for this field to be supported
      # activeDeadlineSeconds: 600
      #restartPolicy: Never
    containers:
      main:
        image:
          repository: bitnami/kubectl
          tag: 1.29
          pullPolicy: IfNotPresent
        command:
          - bash
          - -c
          - >-
            kubectl rollout restart deployment/invidious-main &&
            kubectl rollout status deployment/invidious-main


#apiVersion: batch/v1
#kind: CronJob
#metadata:
#  name: invidious-deployment-restart
#spec:
#  concurrencyPolicy: Forbid
#  schedule: '5 */6 * * *'
#  jobTemplate:
#    spec:
#      backoffLimit: 2
#      template:
#        spec:
#          serviceAccountName: invidious-deployment-restart
#          restartPolicy: Never
#          containers:
#            - name: kubectl
#              image: bitnami/kubectl:1.29
#              imagePullPolicy: IfNotPresent
#              command:
#                - bash
#                - -c
#                - >-
#                  kubectl rollout restart deployment/invidious &&
#                  kubectl rollout status deployment/invidious
#
service:
  main:
    controller: main
    ports:
      http:
        port: 3000

ingress:
  main:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Alternative UI for Youtube
      gethomepage.dev/group: Media
      gethomepage.dev/icon: invidious.png
      gethomepage.dev/name: Invidious
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.2.0/24,192.168.69.0/24"
      # These below are useful for importing the history
      # probably could be lowered to something like 5MBs too
      # On the other hand they're mostly one-off runs, so
      # let's juts keep the defaults and change when needed
      #nginx.ingress.kubernetes.io/proxy-body-size: "0"
      #nginx.ingress.kubernetes.io/server-snippet: |
      #  client_max_body_size 0;
    tls:
      - secretName: invidious-general-tls
        hosts:
          - invidious.{{ requiredEnv "DOMAIN" }}
    hosts:
      - host: invidious.{{ requiredEnv "DOMAIN" }}
        paths:
          - path: /
            service:
              identifier: main

configMaps:
  config:
    enabled: true
    data:
      config.yaml: |
        check_tables: true
        external_port: 443
        domain: invidious.{{ requiredEnv "DOMAIN" }}
        https_only: true
        # statistics_enabled: false
        default_user_preferences:
          region: PL
          quality: dash
          quality_dash: 1080p
          save_player_pos: true
          unseen_only: true
          autoplay: true
          # proxy through instance
          # local: true

persistence:
  config:
    enabled: true
    type: custom
    volumeSpec:
      configMap:
        name: invidious-config

serviceAccount:
  # TODO: don't use this SA for the main deployment
  name: invidious-deployment-restart
  create: true

rawResources:
  db:
    apiVersion: postgres-operator.crunchydata.com/v1beta1
    kind: PostgresCluster
    spec:
      spec:
        postgresVersion: 15
        users:
          - name: invidious
            databases:
              - invidious
            # TODO: These permissions can be probably much more fine-grained
            # We want to keep them quite lax, as the program itself is responsible
            # for creating the initial table layout.
            # This takes the burden off of our shoulders.
            options: "SUPERUSER"
        instances:
          - name: invidious-db
            dataVolumeClaimSpec:
              accessModes:
                - "ReadWriteOnce"
              resources:
                requests:
                  storage: 20Gi
        backups:
          pgbackrest:
            repos:
              - name: repo1
                volume:
                  volumeClaimSpec:
                    accessModes:
                      - "ReadWriteOnce"
                    resources:
                      requests:
                        storage: 20Gi
  vault-auth:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultAuth
    spec:
      spec:
        method: kubernetes
        mount: kubernetes
        kubernetes:
          role: invidious
          serviceAccount: default
  hmac-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/invidious/hmac
        destination:
          name: invidious-hmac-secret
          create: true
        vaultAuthRef: invidious-vault-auth
  deployment-restart-role:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    spec:
      rules:
        - apiGroups:
            - apps
          resources:
            - deployments
          resourceNames:
            - invidious-main
          verbs:
            - get
            - patch
            - list
            - watch
  deployment-restart-role-binding:
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    spec:
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: invidious-deployment-restart-role
      subjects:
        - kind: ServiceAccount
          name: invidious-deployment-restart
