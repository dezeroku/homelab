---
defaultPodOptions:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  nodeSelector:
    # TODO: currently Invidious does not provide multi-manifest images and pushes
    # all the architectures under different tags
    # Details can be found under:
    # * https://github.com/iv-org/invidious/issues/4669
    # * https://github.com/iv-org/invidious/issues/2648
    kubernetes.io/arch: amd64

controllers:
  sig-helper:
    strategy: Recreate
    replicas: 1
    containers:
      main:
        args:
          - --tcp
          - 0.0.0.0:12999
        image:
          repository: quay.io/invidious/inv-sig-helper
          tag: latest
          pullPolicy: Always
        env:
          RUST_LOG: info
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 64Mi

  main:
    #strategy: Recreate
    strategy: RollingUpdate
    # invidious is single-threaded, so bumping number
    # of replicas significantly speeds up things such as loading thumbnails
    replicas: 1
    containers:
      main:
        image:
          repository: quay.io/invidious/invidious
          # Use latest instead of master to play nicely with RKE2 embedded registry mirror
          tag: latest
          pullPolicy: Always
        env:
          # https://github.com/iv-org/invidious/issues/2970
          INVIDIOUS_PORT: 3000
          INVIDIOUS_CONFIG_FILE: /config/config.yaml
          INVIDIOUS_SIGNATURE_SERVER: invidious-sig-helper:12999
          INVIDIOUS_DATABASE_URL:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: uri
          INVIDIOUS_HMAC_KEY:
            valueFrom:
              secretKeyRef:
                name: invidious-hmac-secret
                key: key
          INVIDIOUS_PO_TOKEN:
            valueFrom:
              secretKeyRef:
                name: invidious-yt-tokens
                key: po_token
          INVIDIOUS_VISITOR_DATA:
            valueFrom:
              secretKeyRef:
                name: invidious-yt-tokens
                key: visitor_data
        probes:
          readiness:
            enabled: true
          liveness:
            enabled: true
          startup:
            enabled: true
            spec:
              failureThreshold: 15
        resources:
          limits:
            memory: 1024Mi
          requests:
            memory: 64Mi

    initContainers:
      wait-for-postgresql:
        env:
          DB_HOST:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: host
          DB_PORT:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: port
          DB_USER:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: user
          DB_NAME:
            valueFrom:
              secretKeyRef:
                name: invidious-db-pguser-invidious
                key: dbname
        image:
          repository: postgres
          tag: 15.5-alpine
        args:
          - /bin/sh
          - -c
          - until pg_isready -h "$(DB_HOST)" -p "$(DB_PORT)" -U "$(DB_USER)" -d "$(DB_NAME)"; do echo waiting for database; sleep 2; done;
        resources: {}
      wait-for-sig-helper:
        image:
          repository: busybox
          tag: 1.31
        args:
          - /bin/sh
          - -c
          - echo "Wait for sig-helper to be available"; while ! nc -z invidious-sig-helper 12999; do sleep 1; echo "-"; done; echo "Ready";
        resources: {}

  deployment-restart:
    type: cronjob
    serviceAccount:
      identifier: deployment-restart
    cronjob:
      concurrencyPolicy: Forbid
      schedule: '5 */6 * * *'
      backoffLimit: 2
      # TODO: wait for this field to be supported
      # activeDeadlineSeconds: 600
      #restartPolicy: Never
    containers:
      main:
        image:
          repository: bitnami/kubectl
          tag: 1.29
          pullPolicy: IfNotPresent
        command:
          - bash
          - -c
          - >-
            kubectl rollout restart deployment/invidious-sig-helper &&
            kubectl rollout status deployment/invidious-sig-helper &&
            kubectl rollout restart deployment/invidious-main &&
            kubectl rollout status deployment/invidious-main

  # This job needs to be triggered manually once, when the deployment is initially done
  # Or you can wait 6 hours, so it triggers on its own
  # TODO: do we want to trigger it from initContainer if secret is not present?
  yt-tokens:
    type: cronjob
    serviceAccount:
      identifier: yt-tokens
    cronjob:
      concurrencyPolicy: Forbid
      schedule: '1 */6 * * *'
      backoffLimit: 2
      # TODO: wait for this field to be supported
      # activeDeadlineSeconds: 600
      #restartPolicy: Never
    containers:
      create-secret:
        image:
          repository: bitnami/kubectl
          tag: 1.29
          pullPolicy: IfNotPresent
        command:
          - bash
          - -c
          - >-
            kubectl get secret invidious-yt-tokens && kubectl delete secret invidious-yt-tokens;
            kubectl create secret generic invidious-yt-tokens --from-file=po_token=/yt-tokens/po_token --from-file=visitor_data=/yt-tokens/visitor_data
    initContainers:
      obtain-tokens:
        securityContext:
          # TODO: this container seems to require root at the moment, change it when fixed upstream
          # https://github.com/iv-org/youtube-trusted-session-generator/issues/4
          runAsUser: 0
        image:
          repository: quay.io/invidious/youtube-trusted-session-generator
          tag: latest
          pullPolicy: Always
        args:
          - /bin/sh
          - -c
          - ./startup.sh > /yt-tokens/raw_output; grep "visitor_data" /yt-tokens/raw_output | cut -d ":" -f2 | tr -d '[:blank:]' | tr -d '\n' > /yt-tokens/visitor_data ; grep "po_token" /yt-tokens/raw_output | cut -d ":" -f2 | tr -d '[:blank:]' | tr -d '\n' > /yt-tokens/po_token
        resources: {}

service:
  main:
    controller: main
    primary: true
    ports:
      http:
        port: 3000

  sig-helper:
    controller: sig-helper
    ports:
      sig:
        port: 12999

ingress:
  main:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Alternative UI for Youtube
      gethomepage.dev/group: YT
      gethomepage.dev/icon: invidious.png
      gethomepage.dev/name: Invidious
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.2.0/24,192.168.69.0/24,192.168.70.0/24,192.168.71.0/24"
      # These below are useful for importing the history
      # probably could be lowered to something like 5MBs too
      # On the other hand they're mostly one-off runs, so
      # let's juts keep the defaults and change when needed
      #nginx.ingress.kubernetes.io/proxy-body-size: "0"
      #nginx.ingress.kubernetes.io/server-snippet: |
      #  client_max_body_size 0;
    tls:
      - secretName: invidious-general-tls
        hosts:
          - invidious.{{ requiredEnv "DOMAIN" }}
    hosts:
      - host: invidious.{{ requiredEnv "DOMAIN" }}
        paths:
          - path: /
            service:
              identifier: main

configMaps:
  config:
    enabled: true
    data:
      config.yaml: |
        check_tables: true
        external_port: 443
        domain: invidious.{{ requiredEnv "DOMAIN" }}
        https_only: true
        cache_annotations: true
        # statistics_enabled: false
        default_user_preferences:
          region: PL
          quality: dash
          quality_dash: 1080p
          save_player_pos: true
          unseen_only: true
          autoplay: true
          # proxy through instance
          # local: true

persistence:
  config:
    name: invidious-config
    enabled: true
    type: configMap
    advancedMounts:
      main:
        main:
          - path: /config

  yt-tokens:
    enabled: true
    type: emptyDir
    advancedMounts:
      yt-tokens:
        create-secret:
          - path: /yt-tokens
        obtain-tokens:
          - path: /yt-tokens

serviceAccount:
  name: invidious
  create: true

  extraServiceAccounts:
    deployment-restart:
      create: true

    yt-tokens:
      create: true

rbac:
  roles:
    deployment-restart-role:
      type: Role
      rules:
        - apiGroups:
            - apps
          resources:
            - deployments
          resourceNames:
            - invidious-main
            - invidious-sig-helper
          verbs:
            - get
            - patch
            - list
            - watch
    yt-tokens-role:
      type: Role
      rules:
        - apiGroups:
            - ""
          resources:
            - secrets
          # no resourceNames because of https://github.com/kubernetes/kubernetes/issues/80295#issuecomment-512874100
          verbs:
            - create
        - apiGroups:
            - ""
          resources:
            - secrets
          resourceNames:
            - invidious-yt-tokens
          verbs:
            - get
            - delete
            - patch
            - list
            - watch
  bindings:
    deployment-restart-role-binding:
      type: RoleBinding
      roleRef:
        identifier: deployment-restart-role
      subjects:
        - identifier: deployment-restart
    yt-tokens-role-binding:
      type: RoleBinding
      roleRef:
        identifier: yt-tokens-role
      subjects:
        - identifier: yt-tokens

rawResources:
  db:
    apiVersion: postgres-operator.crunchydata.com/v1beta1
    kind: PostgresCluster
    spec:
      spec:
        postgresVersion: 15
        users:
          - name: invidious
            databases:
              - invidious
            # TODO: These permissions can be probably much more fine-grained
            # We want to keep them quite lax, as the program itself is responsible
            # for creating the initial table layout.
            # This takes the burden off of our shoulders.
            options: "SUPERUSER"
        instances:
          - name: invidious-db
            dataVolumeClaimSpec:
              accessModes:
                - "ReadWriteOnce"
              resources:
                requests:
                  storage: 20Gi
        backups:
          pgbackrest:
            configuration:
              - secret:
                  name: invidious-pgo-backup-s3-secret
            global:
              repo1-s3-uri-style: path
              repo1-retention-full: "2"
              repo1-retention-full-type: count
            repos:
              - name: repo1
                schedules:
                  full: "0 1 * * 0"
                  differential: "0 1 * * 1-6"
                s3:
                  bucket: invidious
                  endpoint: api.k8s-backups.minio.{{ requiredEnv "DOMAIN" }}
                  region: default
  vault-auth:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultAuth
    spec:
      spec:
        method: kubernetes
        mount: k8s/homeserver
        kubernetes:
          role: invidious
          serviceAccount: invidious
  hmac-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/invidious/hmac
        destination:
          name: invidious-hmac-secret
          create: true
        vaultAuthRef: invidious-vault-auth
  pgo-backup-s3-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: core/minio/k8s-backups/backuper-credentials
        destination:
          name: invidious-pgo-backup-s3-secret
          create: true
          transformation:
            excludes:
              - .*
            templates:
              s3.conf:
                text: |
                  [global]
                  repo1-s3-key={{ "{{`{{" }}.Secrets.username{{ "}}`}}" }}
                  repo1-s3-key-secret={{ "{{`{{" }}.Secrets.password{{ "}}`}}" }}
        vaultAuthRef: invidious-vault-auth
