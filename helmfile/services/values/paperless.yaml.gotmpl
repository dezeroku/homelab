# On a first startup:
# * Set PAPERLESS_DISABLE_REGULAR_LOGIN: "false"
# * Log in as admin user and connect the account with OIDC provider
# * Set PAPERLESS_DISABLE_REGULAR_LOGIN back to "true"

defaultPodOptions:
  securityContext:
    #runAsUser: 1000
    #runAsGroup: 1000
    fsGroup: 1000

controllers:
  gotenberg:
    strategy: Recreate
    replicas: 1
    containers:
      main:
        image:
          repository: gotenberg/gotenberg
          tag: 8.7
          pullPolicy: IfNotPresent
        # The gotenberg chromium route is used to convert .eml files. We do not
        # want to allow external content like tracking pixels or even javascript.
        command:
          - "gotenberg"
          - "--chromium-disable-javascript=true"
          - "--chromium-allow-list=file:///tmp/.*"
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 10m
            memory: 256Mi
  tika:
    strategy: Recreate
    replicas: 1
    containers:
      main:
        image:
          repository: apache/tika
          tag: 2.9.2.1
          pullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 1
            memory: 3Gi
          requests:
            cpu: 10m
            memory: 256Mi
  main:
    strategy: Recreate
    replicas: 1
    containers:
      main:
        image:
          repository: ghcr.io/paperless-ngx/paperless-ngx
          tag: 2.12.0
          pullPolicy: IfNotPresent
        env:
          A_OIDC_CLIENT_ID:
            valueFrom:
              secretKeyRef:
                name: paperless-oidc-secret
                key: client_id
          A_OIDC_CLIENT_SECRET:
            valueFrom:
              secretKeyRef:
                name: paperless-oidc-secret
                key: client_secret
          A_REDIS_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: paperless-redis
                key: password
          PAPERLESS_REDIS: redis://:$(A_REDIS_PASSWORD)@paperless-redis-master:6379
          PAPERLESS_DBHOST:
            valueFrom:
              secretKeyRef:
                name: paperless-db-pguser-paperless
                key: host
          PAPERLESS_DBNAME:
            valueFrom:
              secretKeyRef:
                name: paperless-db-pguser-paperless
                key: dbname
          PAPERLESS_DBUSER:
            valueFrom:
              secretKeyRef:
                name: paperless-db-pguser-paperless
                key: user
          PAPERLESS_DBPASS:
            valueFrom:
              secretKeyRef:
                name: paperless-db-pguser-paperless
                key: password
          PAPERLESS_SECRET_KEY:
            valueFrom:
              secretKeyRef:
                name: paperless-secret-key
                key: key
          PAPERLESS_ADMIN_USER:
            valueFrom:
              secretKeyRef:
                name: paperless-admin
                key: username
          PAPERLESS_ADMIN_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: paperless-admin
                key: password
          PAPERLESS_ADMIN_MAIL:
            valueFrom:
              secretKeyRef:
                name: paperless-admin
                key: email
          #PAPERLESS_EMAIL_HOST:
          #  valueFrom:
          #    secretKeyRef:
          #      name: paperless-smtp
          #      key: host
          ## Use TLS Wrapper
          #PAPERLESS_EMAIL_PORT: "465"
          #PAPERLESS_EMAIL_HOST_USER:
          #  valueFrom:
          #    secretKeyRef:
          #      name: paperless-smtp
          #      key: username
          #PAPERLESS_EMAIL_FROM: paperless@{{ requiredEnv "DOMAIN" }}
          #PAPERLESS_EMAIL_HOST_PASSWORD:
          #  valueFrom:
          #    secretKeyRef:
          #      name: paperless-smtp
          #      key: password
          #PAPERLESS_EMAIL_USE_TLS: "true"
          PAPERLESS_APPS: allauth.socialaccount.providers.openid_connect
          PAPERLESS_SOCIALACCOUNT_PROVIDERS: |
            {
              "openid_connect": {
                "APPS": [
                  {
                  "provider_id": "vault",
                  "name": "Vault",
                  "client_id": "$(A_OIDC_CLIENT_ID)",
                  "secret": "$(A_OIDC_CLIENT_SECRET)",
                  "settings": {
                      "server_url": "https://vault.{{ requiredEnv "DOMAIN" }}/v1/identity/oidc/provider/main/.well-known/openid-configuration"
                    }
                  }
                ]
              }
            }
          PAPERLESS_TIKA_ENABLED: 1
          PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
          PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
          PAPERLESS_URL: https://paperless.{{ requiredEnv "DOMAIN" }}
          PAPERLESS_DISABLE_REGULAR_LOGIN: "true"
          PAPERLESS_REDIRECT_LOGIN_TO_SSO: "true"
          PAPERLESS_OCR_LANGUAGE: pol+eng
          PAPERLESS_TIME_ZONE: Europe/Warsaw
          PAPERLESS_OCR_LANGUAGES: pol
          # Allow importing digitally signed PDFs, see https://github.com/paperless-ngx/paperless-ngx/discussions/4047
          # Paperless also keeps originals, so it's fine to invalidate the OCR'd version
          PAPERLESS_OCR_USER_ARGS: '{"invalidate_digital_signatures": true}'
          PAPERLESS_EMPTY_TRASH_DIR: /usr/src/paperless/trash
          PAPERLESS_FILENAME_FORMAT: "{created_year}/{correspondent}/{doc_pk}-{title}"
        probes:
          readiness:
            enabled: true
          liveness:
            enabled: true
        resources:
          limits:
            cpu: 3
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 128Mi
      ses-local-email-s3-monitor:
        # Receive emails to S3 bucket and download .eml files using
        # a small helper
        image:
          repository: ghcr.io/dezeroku/ses_local_email_s3_monitor
          tag: v0.4.0
          pullPolicy: IfNotPresent
        env:
          # TODO: switch to identity based auth with proxy deployed in cluster
          AWS_ACCESS_KEY_ID:
            valueFrom:
              secretKeyRef:
                name: paperless-ses-incoming
                key: aws_access_key_id
          AWS_SECRET_ACCESS_KEY:
            valueFrom:
              secretKeyRef:
                name: paperless-ses-incoming
                key: aws_secret_access_key
          AWS_REGION: eu-central-1
          BUCKET_NAME:
            valueFrom:
              secretKeyRef:
                name: paperless-ses-incoming
                key: bucket_name
          QUEUE_URL:
            valueFrom:
              secretKeyRef:
                name: paperless-ses-incoming
                key: queue_url
          STORAGE_PATH: /consume-mail-staging
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      ses-local-email-eml-unpack-attachments:
        # Unpack attachments from email received in the sidecar above
        image:
          repository: ghcr.io/dezeroku/ses_local_email_eml_unpack_attachments
          tag: v0.4.0
          pullPolicy: IfNotPresent
        env:
          INPUT_DIRECTORY: /consume-mail-staging
          OUTPUT_DIRECTORY: /usr/src/paperless/consume
          ALLOWED_CONTENT_TYPES_REGEX: "application/pdf"
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi

    initContainers:
      wait-for-tika:
        image:
          repository: busybox
          tag: 1.31
        args:
          - /bin/sh
          - -c
          - echo "Wait for tika to be available"; while ! nc -z paperless-tika 9998; do sleep 1; echo "-"; done; echo "Ready";
        resources: {}
      wait-for-gotenberg:
        image:
          repository: busybox
          tag: 1.31
        args:
          - /bin/sh
          - -c
          - echo "Wait for gotenberg to be available"; while ! nc -z paperless-gotenberg 3000; do sleep 1; echo "-"; done; echo "Ready";
        resources: {}

serviceAccount:
  create: true

service:
  main:
    controller: main
    primary: true
    ports:
      http:
        port: 8000
  tika:
    controller: tika
    ports:
      http:
        port: 9998
  gotenberg:
    controller: gotenberg
    ports:
      http:
        port: 3000

ingress:
  main:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Document Management
      gethomepage.dev/group: Storage
      gethomepage.dev/icon: paperless.png
      gethomepage.dev/name: Paperless
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.2.0/24,192.168.69.0/24,192.168.71.0/24"
      #nginx.ingress.kubernetes.io/auth-url: "https://sso.{{ requiredEnv "DOMAIN" }}/oauth2/auth?allowed_groups=download-admins"
      #nginx.ingress.kubernetes.io/auth-signin: "https://sso.{{ requiredEnv "DOMAIN" }}/oauth2/start?rd=https://$host$escaped_request_uri"
    tls:
      - secretName: paperless-tls
        hosts:
          - paperless.{{ requiredEnv "DOMAIN" }}
    hosts:
      - host: paperless.{{ requiredEnv "DOMAIN" }}
        paths:
          - path: /
            service:
              identifier: main

persistence:
  data:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 5Gi
    advancedMounts:
      main:
        main:
          - path: /usr/src/paperless/data
  media:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 5Gi
    advancedMounts:
      main:
        main:
          - path: /usr/src/paperless/media
  export:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 5Gi
    advancedMounts:
      main:
        main:
          - path: /usr/src/paperless/export
  consume:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 5Gi
    advancedMounts:
      main:
        main:
          - path: /usr/src/paperless/consume
        ses-local-email-eml-unpack-attachments:
          - path: /usr/src/paperless/consume
  consume-mail-staging:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 3Gi
    advancedMounts:
      main:
        ses-local-email-s3-monitor:
          - path: /consume-mail-staging
        ses-local-email-eml-unpack-attachments:
          - path: /consume-mail-staging
  trash:
    enabled: true
    type: persistentVolumeClaim
    storageClass: longhorn
    accessMode: ReadWriteOnce
    size: 5Gi
    advancedMounts:
      main:
        main:
          - path: /usr/src/paperless/trash
redis:
  architecture: standalone
  auth:
    existingSecret: paperless-redis
    existingSecretPasswordKey: password
  persistence:
    storageClass: longhorn
    size: 5Gi

rawResources:
  db:
    apiVersion: postgres-operator.crunchydata.com/v1beta1
    kind: PostgresCluster
    spec:
      spec:
        postgresVersion: 16
        users:
          - name: paperless
            databases:
              - paperless
            # TODO: These permissions can be probably much more fine-grained
            # We want to keep them quite lax, as the program itself is responsible
            # for creating the initial table layout.
            # This takes the burden off of our shoulders.
            options: "SUPERUSER"
        instances:
          - name: paperless-db
            dataVolumeClaimSpec:
              accessModes:
                - "ReadWriteOnce"
              resources:
                requests:
                  storage: 5Gi
        backups:
          pgbackrest:
            configuration:
              - secret:
                  name: paperless-pgo-backup-s3-secret
            global:
              repo1-s3-uri-style: path
              repo1-retention-full: "2"
            repos:
              - name: repo1
                s3:
                  bucket: paperless
                  endpoint: api.k8s-backups.minio.{{ requiredEnv "DOMAIN" }}
                  region: default
  vault-auth:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultAuth
    spec:
      spec:
        method: kubernetes
        mount: k8s/homeserver
        kubernetes:
          role: paperless
          serviceAccount: paperless
  pgo-backup-s3-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: core/minio/k8s-backups/backuper-credentials
        destination:
          name: paperless-pgo-backup-s3-secret
          create: true
          transformation:
            excludes:
              - .*
            templates:
              s3.conf:
                text: |
                  [global]
                  repo1-s3-key={{ "{{`{{" }}.Secrets.username{{ "}}`}}" }}
                  repo1-s3-key-secret={{ "{{`{{" }}.Secrets.password{{ "}}`}}" }}
        vaultAuthRef: paperless-vault-auth
  secret-key:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/paperless/secret-key
        destination:
          name: paperless-secret-key
          create: true
        vaultAuthRef: paperless-vault-auth
  admin:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/paperless/admin
        destination:
          name: paperless-admin
          create: true
        vaultAuthRef: paperless-vault-auth
  redis:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/paperless/redis
        destination:
          name: paperless-redis
          create: true
        vaultAuthRef: paperless-vault-auth
  redis:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/paperless/redis
        destination:
          name: paperless-redis
          create: true
        vaultAuthRef: paperless-vault-auth
  ses-incoming:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v2
        mount: kvv2
        path: services/paperless/ses/incoming
        destination:
          name: paperless-ses-incoming
          create: true
        vaultAuthRef: paperless-vault-auth
#  smtp:
#    apiVersion: secrets.hashicorp.com/v1beta1
#    kind: VaultStaticSecret
#    spec:
#      spec:
#        type: kv-v2
#        mount: kvv2
#        path: services/paperless/smtp
#        destination:
#          name: paperless-smtp
#          create: true
#        vaultAuthRef: paperless-vault-auth
  oidc-secret:
    apiVersion: secrets.hashicorp.com/v1beta1
    kind: VaultStaticSecret
    spec:
      spec:
        type: kv-v1
        mount: /identity
        path: oidc/client/paperless
        destination:
          name: paperless-oidc-secret
          create: true
          transformation:
            includes:
              - client_id
              - client_secret
        vaultAuthRef: paperless-vault-auth
