secrets:
  existingSecret: minio-core-root-credentials

tenant:
  name: core
  configuration:
    name: minio-core-root-credentials
  pools:
    - servers: 1
      volumesPerServer: 1
      size: 10Gi
      storageClassName: longhorn
  metrics:
    enabled: true
  #prometheusOperator: true
  features:
    bucketDNS: true
  buckets:
    - name: test
  users:
    - name: minio-core-dezeroku-user-secret
ingress:
  api:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.69.0/24"
      # TODO: make it prettier
      nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/server-snippet: |
        client_max_body_size 0;
      nginx.ingress.kubernetes.io/configuration-snippet: |
        chunked_transfer_encoding off;
    tls:
      - secretName: minio-api-general-tls
        hosts:
          - api.core.minio.{{ requiredEnv "DOMAIN" }}
    host: api.core.minio.{{ requiredEnv "DOMAIN" }}
  console:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: "cert-manager-letsencrypt-dns-prod"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: S3-compatible storage for base files
      gethomepage.dev/group: Storage
      gethomepage.dev/icon: minio.png
      gethomepage.dev/name: Minio (Core)
      nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,192.168.69.0/24"
      # TODO: make it prettier
      nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/server-snippet: |
        client_max_body_size 0;
      nginx.ingress.kubernetes.io/configuration-snippet: |
        chunked_transfer_encoding off;
    tls:
      - secretName: minio-console-general-tls
        hosts:
          - core.minio.{{ requiredEnv "DOMAIN" }}
    host: core.minio.{{ requiredEnv "DOMAIN" }}

app-template:
  rawResources:
    vault-auth:
      apiVersion: secrets.hashicorp.com/v1beta1
      kind: VaultAuth
      spec:
        spec:
          method: kubernetes
          mount: k8s/homeserver
          kubernetes:
            role: minio
            # TODO: operator will only create the sa after the secret is already in place
            # so let's use default for now
            serviceAccount: default
    root-credentials:
      apiVersion: secrets.hashicorp.com/v1beta1
      kind: VaultStaticSecret
      spec:
        spec:
          type: kv-v2
          mount: kvv2
          path: services/minio/core/root-credentials
          destination:
            name: minio-core-root-credentials
            create: true
            transformation:
              excludes:
                - .*
              templates:
                config.env:
                  text: |
                    export MINIO_ROOT_USER={{ "{{`{{" }}.Secrets.rootUser{{ "}}`}}" }}
                    export MINIO_ROOT_PASSWORD={{ "{{`{{" }}.Secrets.rootPassword{{ "}}`}}" }}
          vaultAuthRef: minio-core-vault-auth
    dezeroku-user-secret:
      apiVersion: secrets.hashicorp.com/v1beta1
      kind: VaultStaticSecret
      spec:
        spec:
          type: kv-v2
          mount: kvv2
          path: services/minio/core/dezeroku-credentials
          destination:
            name: minio-core-dezeroku-user-secret
            create: true
            transformation:
              excludes:
                - .*
              templates:
                CONSOLE_ACCESS_KEY:
                  text: |
                    {{ "{{`{{" }}.Secrets.username{{ "}}`}}" }}
                CONSOLE_SECRET_KEY:
                  text: |
                    {{ "{{`{{" }}.Secrets.password{{ "}}`}}" }}
          vaultAuthRef: minio-core-vault-auth
